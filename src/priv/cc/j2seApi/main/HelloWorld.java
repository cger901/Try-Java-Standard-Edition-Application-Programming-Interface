// Java中的单行注释
/* Java中的多行注释 */
/**Java中的文档注释 */

// Java默认的编码格式是ASCII码，使用笔记本环境编写Java代码时必须使用ASCII码。本项目使用Eclipse环境编写，编码格式UTF-8。
// 本项目遵守的命名规范来源于：阿里巴巴Java开发手册v1.2.0

/* Java是由Sun Microsystems公司于1995年5月推出的Java面向对象程序设计语言和Java平台的总称。由James Gosling和同事们共同
 * 研发，并在1995年正式推出。
 * 
 * Java分为三个体系：
 * 
 * J2SE标准版（Java 2 Platform Standard Edition），JavaSE
 *   适用于桌面应用，是为开发普通桌面应用和商务应用程序提供的解决方案，该技术体系是其他体系（J2ME/J2EE）的基础，可以完成一些桌面应用的
 *   开发
 * 
 * J2EE企业版（Java 2 Platform Enterprise Edition），JavaEE
 *   适用于创建服务器应用程序和应用，是为开发企业环境下的应用程序提供的一套解决方案，
 *   该技术体系中包含的技术如Servlet、JSP（Java Servlet Page）等，主要针对web应用程序开发
 * 
 * J2ME微型班（Java 2 Platform Micro Edition），JavaME
 *   适用于小型设备和智能卡，是为开发电子消费产品和嵌入式设备提供的解决方案，常用于手机应用的开发
 * 
 * 发展历史：
 *   1995年5月23日，Java语言诞生
 *   1996年1月，第一个JDK-JDK1.0诞生
 *   1996年4月，10个最主要的操作系统供应商申明将在其产品中嵌入JAVA技术
 *   1996年9月，约8.3万个网页应用了JAVA技术来制作
 *   1997年2月18日，JDK1.1发布
 *   1997年4月2日，JavaOne会议召开，参与者逾一万人，创当时全球同类会议规模之纪录
 *   1997年9月，JavaDeveloperConnection社区成员超过十万
 *   1998年2月，JDK1.1被下载超过2,000,000次
 *   1998年12月8日，JAVA2企业平台J2EE发布
 *   1999年6月，SUN公司发布Java的三个版本：标准版（JavaSE,以前是J2SE）、企业版（JavaEE以前是J2EE）和微型版（JavaME，以前
 *   是J2ME）
 *   2000年5月8日，JDK1.3发布
 *   2000年5月29日，JDK1.4发布
 *   2001年6月5日，NOKIA宣布，到2003年将出售1亿部支持Java的手机
 *   2001年9月24日，J2EE1.3发布
 *   2002年2月26日，J2SE1.4发布，自此Java的计算能力有了大幅提升
 *   2004年9月30日18:00PM，J2SE1.5发布，成为Java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5更名为Java SE 5.0
 *   2005年6月，JavaOne大会召开，SUN公司公开Java SE 6。此时，Java的各种版本已经更名，以取消其中的数字"2"：J2EE更名为Java EE，
 *   J2SE更名为Java SE，J2ME更名为Java ME
 *   2006年12月，SUN公司发布JRE6.0
 *   2009年04月20日，甲骨文74亿美元收购Sun。取得java的版权。
 *   2010年11月，由于甲骨文对于Java社区的不友善，因此Apache扬言将退出JCP（Java Community Process 是一个开放的国际组织，主要由
 *   Java开发者和被授权者组成，职能是发展和更新）。
 *   2011年7月28日，甲骨文发布java7.0的正式版。
 *   2014年3月18日，Oracle公司发表Java SE 8。
 */

/* Java的语言特点有：简单性、面型对象、分布式、健壮性、安全性、体系结构中立、可移植性、解释性、高性能、多线程、动态性
 * 
 *  1.简单性：
 *    1.1.易于理解，不需要经过专业训练就可以进行开发。Java语言在设计时有很多内容参照了C++，它的语法与C语言和C++语言很接近，使得大多
 *    数程序员很容易学习使用；另一方面，Java丢弃了C++中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型
 *    转换。特别地，Java语言不使用指针，而是引用。并提供了自动的废料收集，使得程序员不必为内存管理而担忧。
 *    1.2.体积小，Java的目标之一就是开发能在小型机上独立运行的软件。基本的解释器以及类支持大约需要40kb，再加上基础的标准类库和对线程
 *    的支持，（以上可以理解为一个微内核）大约需要175kb。
 *    
 *  2.面向对象：
 *    简单的讲，面向对象设计就是一种程序设计技术。它将重点放在数据（即对象）和对象的接口上。Java语言提供类、接口和继承等原语，为了简单起
 *    见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为implements）。Java语言全面支持动态绑定，
 *    而C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。
 *    
 *  3.分布式
 *    Java语言支持Internet应用的开发，在基本的Java应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的
 *    类库，包括URL、URLConnection、Socket、ServerSocket等。Java的RMI（远程方法激活）机制也是开发分布式应用的重要手段。
 *    
 *  4.健壮性
 *    Java的强类型机制、异常处理、垃圾的自动收集等是Java程序健壮性的重要保证。对指针的丢弃是Java的明智选择。Java的安全检查机制使得
 *    Java更具健壮性。
 *    
 *  5.安全性
 *    Java通常被用在网络环境中，为此，Java提供了一个安全机制以防恶意代码的攻击。除了Java语言具有的许多安全特性以外，Java对通过网络下
 *    载的类具有一个安全防范机制（类ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查，并提供安全管理机制（类Sec-
 *    urityManager）让Java应用设置安全哨兵。
 *    
 *  6.体系结构中立
 *    编译器（javac.exe）生成一个体系结构中立的目标文件格式（.class），这是一种编译过的代码，只要有Java运行时系统(JRE)，就可以在
 *    实现这个Java平台的任何系统中运行。这种途径适合于异构的网络环境和软件的分发。Java编译器通过生成与特定的计算机体系结构无关的字节码指
 *    令来实现这一特征。字节码不仅可以容易的在任何机器上解释执行，而且可以迅速的翻译成本地机器的代码。解释字节码肯定会比全速运行的机器指令慢
 *    很多，然而虚拟机（Java Virtual Machine）有一个选项，可以将使用最频繁的字节码序列翻译成机器码，这一过程被称为即时编译（Just-
 *    in-time compilation）。
 *    
 *  7.可移植性
 *    这种可移植性来源于体系结构中立性，另外，Java还严格规定了各个基本数据类型的长度。Java系统本身也具有很强的可移植性，Java编译器是用
 *    Java实现的，Java的运行环境是用ANSI C实现的。
 *    
 *  8.解释性
 *    如前所述，Java程序在Java平台上被编译为字节码格式，然后可以在实现这个Java平台的任何系统中运行。在运行时，Java平台中的Java解释
 *    器对这些字节码进行解释执行，执行过程中需要的类在联接阶段被载入到运行环境中。
 *    
 *  9.高性能
 *    与那些解释型的高级脚本语言相比，Java的确是高性能的。事实上，Java的运行速度随着JIT(Just-In-Time）编译器技术的发展越来越接近
 *    于C++。
 *    
 *  10.多线程
 *    在Java语言中，线程是一种特殊的对象，它必须由Thread类或其子（孙）类来创建。通常有两种方法来创建线程：其一，使用型构为Thread(Ru-
 *    nnable)的构造子将一个实现了Runnable接口的对象包装成一个线程，其二，从Thread类派生出子类并重写run方法，使用该子类创建的对象
 *    即为线程。值得注意的是Thread类已经实现了Runnable接口，因此，任何一个线程均有它的run方法，而run方法中包含了线程所要运行的代码。
 *    线程的活动由一组方法来控制。Java语言支持多个线程的同时执行，并提供多线程之间的同步机制（关键字为synchronized）。
 *    
 *  11.动态性
 *    Java语言的设计目标之一是适应于动态变化的环境。Java程序需要的类能够动态地被载入到运行环境，也可以通过网络来载入所需要的类。这也有利于
 *    软件的升级。另外，Java中的类有一个运行时刻的表示，能进行运行时刻的类型检查。
 *    
 */

/* 包名（Package）
 * 
 * 为了更好的组织类，Java提供了包机制，用于区别类名的命名空间，Java中的一个包就是一个类库单元。
 * 包的作用有：
 *  1.把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用。
 *  2.如同文件夹一样，包也包含了树形目录的储存方式。同一个包中类的名字是不同的，不同包中的类的名字是
 *  可以相同的，当同时调用两个不同类中相同类名的类时，应该加上包名加以区别。因此，包可以避免类名冲突。
 *  3.包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。
 * 
 * 规范：包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。
 */
package priv.cc.j2seApi.main;

/* 导入包
 * 当使用一个其他包中的类时，必须先导入对应的包才能使用
 * 例如：import java.lang.*;
 * 但是由于Java会默认导入java.lang包，所以使用java.lang包中的类时无需导入包
 * 另外使用相同包名路径下的类时，也无需导入包
 */

/* 一个Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。
 * 
 * “对象”（Object）是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。
 * 
 * “类”（Class）是一个模板，它描述一类对象的行为和状态。方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。
 * 
 * 在类的声明中，属性是用“变量”（Variables）来表示的。这种变量就称为“实例变量”（Instance Variables），是在类声明的内部但是在类的
 * 其他成员方法之外声明的。类的每个对象维护它自己的一份实例变量的副本。每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。
 */

/* “Java标识符”
 * Java所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符（IDentifier）。
 * 关于Java标识符，有以下几点需要注意：
 *   所有的标识符都应该以字母（A-Z或者a-z）,美元符（$）、或者下划线（_）开始
 *   首字符之后可以是字母（A-Z或者a-z）,美元符（$）、下划线（_）或数字的任何字符组合
 *   关键字不能用作标识符
 *   标识符是大小写敏感的
 *   合法标识符举例：age、$salary、_value、__1_value
 *   非法标识符举例：123abc、-salary
 * 
 * “Java修饰符”
 * 像其他语言一样，Java可以使用修饰符（Modifier）来修饰类中方法和属性。主要有两类修饰符：
 *   访问控制修饰符 : default, public , protected, private
 *   非访问控制修饰符 : final, abstract, strictfp
 * 
 * “Java变量”
 * Java中主要有如下几种类型的变量：
 *   局部变量
 *   类变量（静态变量）
 *   成员变量（非静态变量）
 */

/**
 * 学习第一个Java程序。
 * <p>
 * “public”是访问修饰符，表示该字段/方法/类的访问权限，按作用范围可分为：
 * <pre>公开（public）可以被任何包中的所有类访问</pre>
 * <pre>受保护（protected）可以被同包的所有类以及其他包的子类所访问</pre>
 * <pre>默认（default）可以被同包的所有类访问</pre>
 * <pre>私有（private）只能被自身访问</pre>
 * <p>
 * “class”表示该数据类型是一个类。</p> 
 * 我们来研究一个事物：
 * <pre>
 * 属性：外在特征；例如人的身高，体重。
 * 行为：能够做什么；例如人有说话，打球等行为。
 * </pre>
 *  而在Java语言中，最基本的单位是类，类就是用来体现事物的。 用类class来描述事物也是如此：
 * <pre>
 * 属性：对应类中的成员变量。
 * 行为：对应类中的成员函数。
 * </pre>
 * 定义类其实就是在定义类中的成员（成员变量和成员函数）。类是一个抽象的概念，而对象就是类的具体的存在，体现。
 * <p>
 * “HelloWorld”是类名。
 * </p>
 * 规范：<ul><li>
 * 类名使用 UpperCamelCase 风格，必须遵从驼峰形式，但以下情形例外： DO / BO / DTO / VO / AO
 * </li><li>
 * 抽象类命名使用 Abstract 或 Base 开头 ； 异常类命名使用 Exception 结尾 ； 测试类命名以它要测试的类的名称开始，以 Test 结尾。
 * </li><li>
 * 包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。
 * </li><li>
 * 杜绝完全不规范的缩写，避免望文不知义。
 * </li><li>
 * 如果使用到了设计模式，建议在类名中体现出具体模式。将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。
 * </li><li>
 * 对于 Service和 DAO类，基于 SOA的理念，暴露出来的服务一定是接口，内部的实现类用 Impl的后缀与接口区别。
 * </li><li>
 * 如果是形容能力的接口名称，取对应的形容词做接口名 （ 通常是–able的形式 ）
 * </li><li>
 * 枚举类名建议带上Enum后缀，枚举成员名称需要全大写，单词间用下划线隔开。
 * </li></ul>
 * </p>
 * 另外，Java是大小写敏感的，这就意味着标识符Hello与hello是不同的。
 * 源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记Java是大小写敏感的），文件名的后缀为.java。（如果文件
 * 名和类名不相同则会导致编译错误）。
 * <p>
 * 
 * @author cc
 */
public class HelloWorld {

	/**
	 * Java程序的默认入口方法，表示程序由此执行。
	 * 一个类中只能包含一个main方法。
	 * <p>
	 * “static”表示该方法是一个静态方法，可以被静态方法和动态方法访问。
	 * 若不包含static修饰符的字段（Field）或方法则代表其本身为动态（Dynamic）的，动态的字段或方法不能被直接调用，必须先创建实例。 
	 * <p>
	 * “void”是方法的返回类型，void表示该方法没有返回参数（Params）。方法的返回的数据类型可以是基本数据类型也可以是引用数据类型。
	 * <p>
	 * 基本数据类型又称为源生数据类型，Java中定义的基本数据类型可以分为4类、8种：
	 * <pre>整数型：byte/short/int/long</pre>
	 * <pre>浮点型：float/double</pre>
	 * <pre>字符型：char</pre>
	 * <pre>布尔型：boolean</pre>
	 * “main”是方法名。
	 * 所有的Java程序都由“public static void main(String[] ages)”方法开始执行。
	 * <p>
	 * 规范：
	 * <ul><li>
	 * 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。
	 * </li><li>
	 * 接口类中的方法（Method）和属性（Attribute）不要加任何修饰符号 （public 也不要加 ） ，保持代码的简洁性，并加上有效的 Javadoc注释。尽量不要在接
	 * 口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。
	 * </li></ul>
	 * 
	 * @param args 程序执行前传入的参数。参数可以分为两种：形式参数（parameter）是指函数定义中参数；实际参数（argument），
	 * 指的是函数调用时的实际参数。
	 * <p>“Sting”定义了参数类型是字符串（java.lang.String）。
	 * <p>[]表示该参数是一个数组（Array），数组是储存在堆上的对象，
	 * 可以保存多个同类型变量。规范：中括号是数组类型的一部分，数组定义如下： String[] args。
	 */
	public static void main(String[] args) {
		
		/* Java中的括号使用：
		 * 小括号()，表示参数
		 * 中括号[]，表示数组
		 * 尖括号<>，表示泛型
		 * 花括号{}，表示函数体
		 */

		/* “java.lang.System”是“java.lang”包中的一个类
		 * 
		 * System类中包含几个有用的字段和方法，它不能被实例化。
		 * 在System类中为我们提供了：
		 *   标准输入（Standard Input）、标准输出（Standard Output）、错误输出流（Error Output Streams）；
		 *   访问外部定义的属性和环境变量；
		 *   加载文件和库的方法；
		 *   一个实用的快速复制某数组一部分的方法。
		 * 
		 * “out”字段是System的成员字段，其由public访问修饰符、static修饰符和final修饰符修饰。类型是PrintStream（j-
		 * ava.io.PrintStream）。其初始化方法是由非Java语言实现的（Native Method）。
		 * 
		 * “final”表示一个值被初始化之后就不能再被改变了。当修饰在方法前，则表示该方法不能被重写。或者一个类不能有子类。
		 * 换言之，out是一个常量。
		 * 
		 * “println(String x)”是java.io.PrintStream类的成员方法，
		 * 该方法的作用是打印一个字符串（String），然后结束该行。这种方法实际上是先调用print(String)方法，再调用println()
		 * 方法。该方法加载了synchronized锁，是线程安全（Thread safety）的。
		 * 
		 * 线程（Lightweight Process），有时候被称为轻量级进程，是程序执行流的最小单元。一个标准的线程由线程ID，当前指针指令
		 * （PC），寄存器集合和堆栈组成。另外一个线程是一个独立的实体，是被系统独立调度和分配的基本单位，线程自己不拥有系统资源，值拥
		 * 有一点儿在运行中必不可少的资源。但它可以与同属一个进程的其他线程共享进程所拥有的全部资源。
		 * 
		 * main方法也可以理解为程序执行的主线程。
		 * 
		 * “synchronized”是同步锁，可用来给对象和方法或者代码块加锁，当它锁定一个方法或者一个代码块的时候，同一时刻最多只有一个
		 * 线程执行这个段代码。当两个并发线程访问同一个对象object中的这个加锁同步代码块时，一个时间内只能有一个线程得到执行。另一个
		 * 线程必须等待当前线程执行完这个代码块以后才能执行该代码块。然而，当一个线程访问object的一个加锁代码块时，另一个线程仍然可以
		 * 访问该object中的非加锁代码块。
		 * 
		 * “Hello,World!”是一个字符串（java.lang.String），字符串是一个引用数据类型，内容前后由双引号括起来。
		 * 
		 * Java代码中以分号（;）为一行代码的结尾。
		 */
		System.out.println("Hello,World!");

	}

}
